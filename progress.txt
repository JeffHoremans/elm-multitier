Version 6
---------
- Added automatic push of the server state to clients. Before, if clients wanted the current server, they needed to define a procedure which extracted
  (part of) that state, potentially on a regular basis, thereby mimicking polling behaviour. Now, the multi-tier framework automatically keeps websocket connections
  between clients and whenever the state of the server changes, it will notify all clients of this change, by sending the new state to the client.
  Similarly to the bootstrapping solution, not the entire server model is sent, but a subset, created by using the serverState method provided by the user as mentioned before.

Version 5
---------
- Updated to version 0.18 which changed some minor things that made multitier-elm life a bit easier. In Elm 0.17, to perform a task one
  always needed to provide to-Msg functions for both the success and fail scenarios, even if the task could never fail. In 0.18 one has two options
  perform a task that can never fail (fail type Never) with only 1 to-Msg function required for the success scenario, or attempting to perform a task
  which can both succeed or fail, but instead of needing two to-Msg functions it now also requires one, that creates a Msg from a result.
  This means that the creation of remote procedures for the multitier-elm programmer now requires one less argument and fits better.
- Added automatic initialization of the client with the current server state (so called bootstrapping). The init method of the client now takes a user-defined
  input datatype. The user also provides a method that creates the serverState based on the serverModel to enable him to protect data that should not be
  exposed outside of the server to be leaked. When a client request is made, the server will write the current state of the server model to a file by encoding it
  to JSON and then to a string which will be converted to the right input data to initialize the client, preventing the need for requesting that very state at
  the server initially.

Version 4
----------
- Removed redundant encoding and decoding of the return type of remote procedures. This is now automatically done by also
  using the JSON stringify and parse methods that were introduced in the previous version.
- Refactored the updateServer method which contained a possible server model leak (using the handlers). The RemoteProcedure datatype now contains
  instead of the handlers and the task to complete, the same handlers and now a function from a serverModel to a tupel of
  a new, updated serverModel and the task to complete. This way, the handlers have no access to the serverModel. The ServerModel is inserted when the
  task is needed by the Multitier framework.
- Added support for server-only messages/updates.
- Still todo: resolving a bug in the httpserver elm code + refactoring error handling over the network + optimizing API


Version 3
----------
- Added server state: an additional initServer method is needed for initializing server state per module.
  The procedures mapping function was renamed to updateServer which now also takes the serverModel and returns
  a tuple containing the new serverModel and the remoteprocedure data structure from before.
- The decoder and encoder that the user needed to provide to encode and decode his procedures has been removed.
  As the data being sent is always Elm data, we can safely use the native JSON stringify and parse methods to automatically
  encode and decode procedure data.


Version 2
----------
- Redesign of procedures
- Every module now needs to define its own Procedure type and a mapping function that maps those procedure types to remote procedure.
  Procedures of submodules are mapped and batched together so that the program uses one single mapping function and procedure type.
  A remote procedure is a type containing all what is needed for a client or server to handle server commands.
  To perform a server command only requires a procedure, which contains all argument data. Both client and server use the mapping
  function to get the data they require for the specific procedure. The client needs handlers for success and error scenarios when
  it wraps the command to a server request, and the server needs the actual task to execute. The mapping function handles applying the
  arguments contained in the given procedure to get that task.
- An encoder and a decoder is required for the procedure type and this has to be done with care so that every procedure is encoded and
  decoded correctly and uniquely. Sub-procedures need to be mapped in the same regard.

Version 1
----------
- Multi-tier commands wrap server and client commands which are unwrapped by the program methods for server and client.
- Configuration for server, including hostname, port and the ability to host the client file
- Basic remote procedure support
- Remote procedures are only registered when defined at compile time
  --> need for sending arguments at runtime
- No server state yet
