Version 4
----------
- Removed redundant encoding and decoding of the return type of remote procedures. This is now automatically done by also
  using the JSON stringify and parse methods that were introduced in the previous version.
- Refactored the updateServer method which contained a possible server model leak (using the handlers). The RemoteProcedure datatype now contains
  instead of the handlers and the task to complete, the same handlers and now a function from a serverModel to a tupel of
  a new, updated serverModel and the task to complete. This way, the handlers have no access to the serverModel. The ServerModel is inserted when the
  task is needed by the Multitier framework.
- Added support for server-only messages/updates.
- Still todo: resolving a bug in the httpserver elm code + refactoring error handling over the network + optimizing API


Version 3
----------
- Added server state: an additional initServer method is needed for initializing server state per module.
  The procedures mapping function was renamed to updateServer which now also takes the serverModel and returns
  a tuple containing the new serverModel and the remoteprocedure data structure from before.
- The decoder and encoder that the user needed to provide to encode and decode his procedures has been removed.
  As the data being sent is always Elm data, we can safely use the native JSON stringify and parse methods to automatically
  encode and decode procedure data.


Version 2
----------
- Redesign of procedures
- Every module now needs to define its own Procedure type and a mapping function that maps those procedure types to remote procedure.
  Procedures of submodules are mapped and batched together so that the program uses one single mapping function and procedure type.
  A remote procedure is a type containing all what is needed for a client or server to handle server commands.
  To perform a server command only requires a procedure, which contains all argument data. Both client and server use the mapping
  function to get the data they require for the specific procedure. The client needs handlers for success and error scenarios when
  it wraps the command to a server request, and the server needs the actual task to execute. The mapping function handles applying the
  arguments contained in the given procedure to get that task.
- An encoder and a decoder is required for the procedure type and this has to be done with care so that every procedure is encoded and
  decoded correctly and uniquely. Sub-procedures need to be mapped in the same regard.

Version 1
----------
- Multi-tier commands wrap server and client commands which are unwrapped by the program methods for server and client.
- Configuration for server, including hostname, port and the ability to host the client file
- Basic remote procedure support
- Remote procedures are only registered when defined at compile time
  --> need for sending arguments at runtime
- No server state yet
